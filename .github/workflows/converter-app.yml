name: Build and Deploy Converter App

on:
  push:
    branches: 
      - "main"
    paths:
      - services/converter/**
      - services/converter-app/**
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/converter-app/Dockerfile
          tags: convertmaster:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          load: true  # needed if you want to use the image in later steps locally

#      - name: Build Docker image
 #       run: docker build -f services/converter-app/Dockerfile -t convertmaster:latest .

      - name: Save Docker image to tarball
        run: docker save convertmaster:latest -o convertmaster.tar

      - name: Move image to temporary directory
        run: mkdir -p upload-cm-app && mv convertmaster.tar upload-cm-app/ && chmod -R 755 upload-cm-app

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_HOST_KEY }}
          passphrase: ${{ secrets.DEPLOY_HOST_KEY_PASSPHRASE }}
          source: "upload-cm-app/*"
          target: "/var/tmp/"
          port: 22
          timeout: 30s
          command_timeout: 10m
          use_insecure_cipher: false
          rm: false
          debug: false
          strip_components: 0
          overwrite: true  # ensures overwrite of existing file
          tar_dereference: false

      - name: Copy compose file to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_HOST_KEY }}
          passphrase: ${{ secrets.DEPLOY_HOST_KEY_PASSPHRASE }}
          source: "./services/converter-app/docker-compose.yml"
          target: "~/"
      - name: Deploy Docker image on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_HOST_KEY }}
          passphrase: ${{ secrets.DEPLOY_HOST_KEY_PASSPHRASE }}
          script: |
            docker network create converter-network || echo "converter-network already exists"
            
            if [[ `docker ps|grep convertmaster` ]]; then
             container_id=`docker ps |grep convertmaster|awk '{print $1}'`
             docker stop $container_id
             docker rm $container_id
            fi
            docker rmi convertmaster:latest || echo "No old dev image found to remove"
            
            docker load -i /var/tmp/upload-cm-app/convertmaster.tar
            
            mkdir -p /var/tmp/convertMaster/logs
            sed "s/POSTGRES_DSN_VALUE/${{ secrets.POSTGRES_DSN }}/g" ~/services/converter-app/docker-compose.yml| sed "s/MONTHLY_PRICE_ID_VALUE/${{ secrets.MONTHLY_PRICE_ID }}/g"| sed "s/YEARLY_PRICE_ID_VALUE/${{ secrets.YEARLY_PRICE_ID }}/g"| sed "s/DAILY_PRICE_ID_VALUE/${{ secrets.DAILY_PRICE_ID }}/g"| sed "s/STRIPE_KEY_VALUE/${{ secrets.STRIPE_KEY }}/g"| sed "s/STRIPE_ENDPOINT_SECRET_VALUE/${{ secrets.STRIPE_ENDPOINT_SECRET }}/g" | sed "s#APP_DOMAIN_VALUE#http://178.16.143.20:9080/#g" > ~/services/converter-app/compose.yml
            
            docker compose -f ~/services/converter-app/compose.yml up -d 2>/var/tmp/convertMaster/logs/converter-app_stderr.log 1>/var/tmp/convertMaster/logs/converter-app_stdout.log
            
            elapsed_time=0

            while ! docker ps | grep -q convertmaster && [ $elapsed_time -lt 300 ]; do
              echo "Waiting for convertmaster container to start..."
              sleep 20
              elapsed_time=$((elapsed_time + 20))
            done

            if [ $elapsed_time -ge 300 ]; then
              echo "Timeout reached! Container did not start after 300 seconds."
              rm -rf ~/services/converter-app
              rm -rf /var/tmp/upload-cm-app
              exit 1  # Fail the job if the container did not start
            fi
            echo "Container is up and running!"
            
            #rm -rf ~/services/converter-app
            #rm -rf /var/tmp/upload-cm-app