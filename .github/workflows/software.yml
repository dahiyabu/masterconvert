name: Build Software for all OS Platforms

on:
  push:
    branches: 
      - "main"
    paths:
      - services/converter-sw/**
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13.2'

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libreoffice tesseract-ocr ffmpeg ghostscript p7zip-full
          pip install -r ./services/converter-sw/requirements.txt
      
      - name: Debug Tesseract installation
        run: |
          find /usr -type d -name tessdata
            
      - name: Clone PyInstaller and patch bootloader with progress print
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller

          # Inject progress log into archive extraction code
          sed -i '/TOC iterating/a \ \ \ \ printf("Extracting: %s\\n", entry->name);' bootloader/src/pyi_archive.c

          # Build the bootloader
          cd bootloader
          python3 ./waf all

      - name: Install patched PyInstaller from local source
        run: |
          cd pyinstaller
          pip install .

      - name: Build app (Linux)
        run: |
          pyinstaller \
            --onefile \
            --add-data "./services/converter-sw/build:build" \
            --add-data "/usr/bin/libreoffice:dependencies" \
            --add-data "/usr/bin/tesseract:dependencies" \
            --add-data "/usr/bin/ffmpeg:dependencies" \
            --add-data "/usr/share/tesseract-ocr/5/tessdata:dependencies" \
            --add-data "/usr/bin/gs:dependencies" \
            --add-data "/usr/bin/7z:dependencies" \
            --distpath ./output/linux ./services/converter-sw/fileConverter.py

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ./output/linux/*

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13.2'

      - name: Install dependencies
        run: |
          brew update
          brew install --cask libreoffice
          brew install tesseract ffmpeg ghostscript p7zip
          pip install -r ./services/converter-sw/requirements.txt
      
      - name: Clone PyInstaller and patch bootloader
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller
          sed -i '' '/TOC iterating/a\
          printf("Extracting: %s\\n", entry->name);' bootloader/src/pyi_archive.c
          cd bootloader
          python3 ./waf all

      - name: Install patched PyInstaller
        run: |
          cd pyinstaller
      
          pip install .
      - name: Build app (macOS)
        run: |
          pyinstaller \
            --onefile \
            --add-data "./services/converter-sw/build:build" \
            --add-data "/Applications/LibreOffice.app/Contents/MacOS/soffice:dependencies" \
            --add-data "/opt/homebrew/bin/tesseract:dependencies" \
            --add-data "/opt/homebrew/bin/ffmpeg:dependencies" \
            --add-data "/opt/homebrew/share/tessdata:dependencies" \
            --add-data "/opt/homebrew/bin/gs:dependencies" \
            --add-data "/opt/homebrew/bin/7z:dependencies" \
            --distpath ./output/mac ./services/converter-sw/fileConverter.py

      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: ./output/mac/*

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13.2'

      - name: Clone PyInstaller
        shell: pwsh
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller/bootloader
          git submodule update --init --recursive

      - name: Patch bootloader (Windows only)
        shell: pwsh
        run: |
          $mainFile="pyinstaller/bootloader/src/pyi_main.c"
          $patched=$(mktemp)

          awk '
          BEGIN {
            addedStdIO = 0;
            addedWindows = 0;
            insideMain = 0;
          }
          {
            if (!addedStdIO && $0 ~ /^#include/) {
              print "#include <stdio.h>";
              addedStdIO = 1;
            }
            if (!addedWindows && $0 ~ /^#include/) {
              print "#include <windows.h>";
              print "#include <io.h>";
              addedWindows = 1;
            }
            print;
            if ($0 ~ /int[[:space:]]+PYI_MAIN[[:space:]]*\(.*\)[[:space:]]*{/) {
              insideMain = 1;
              print "    setvbuf(stdout, NULL, _IONBF, 0);  // Unbuffer stdout";
              print "    printf(\"[BOOT] PyInstaller bootloader started\\n\");";
              print "    char cwd[MAX_PATH];";
              print "    GetCurrentDirectory(MAX_PATH, cwd);";
              print "    printf(\"[BOOT] Current working dir: %s\\n\", cwd);";
              print "    WIN32_FIND_DATA findFileData;";
              print "    HANDLE hFind = FindFirstFile(\"*\", &findFileData);";
              print "    if (hFind != INVALID_HANDLE_VALUE) {";
              print "        do {";
              print "            printf(\"[BOOT] Found file: %s\\n\", findFileData.cFileName);";
              print "        } while (FindNextFile(hFind, &findFileData));";
              print "        FindClose(hFind);";
              print "    }";
            }
            if (insideMain && $0 ~ /pyi_launch_initialize\(pyi_ctx\);/) {
              print "    printf(\"[BOOT] Initializing... please wait\\n\");";
            }
            if (insideMain && $0 ~ /ret = pyi_launch_execute\(pyi_ctx\);/) {
              print "    printf(\"[BOOT] Launching now...\\n\");";
            }
            if (insideMain && $0 ~ /^}/) {
              insideMain = 0;
            }
          }' "$mainFile" > "$patched"

          mv "$patched" "$mainFile"

      - name: Patch pyi_launch.c
        shell: pwsh
        run: |
          $launchFile="pyinstaller/bootloader/src/pyi_launch.c"
          $patched=$(mktemp)

          awk '
          BEGIN {
            injectedSetvbuf = 0;
          }
          {
            if (!injectedSetvbuf && $0 ~ /\{/) {
              print;
              print "    setvbuf(stdout, NULL, _IONBF, 0);  // Unbuffer stdout";
              injectedSetvbuf = 1;
              next;
            }
            print;
            if ($0 ~ /fwrite\(.*\);/) {
              print "    printf(\"[BOOT] Extracting: %s\\n\", target_path);";
            }
          }' "$launchFile" > "$patched"

          mv "$patched" "$launchFile"

      - name: Build patched bootloader
        shell: pwsh
        run: |
          cd pyinstaller/bootloader
          python3 ./waf distclean
          python3 ./waf configure
          python3 ./waf all

      - name: Install patched PyInstaller from local source
        shell: bash
        run: |
          pip uninstall pyinstaller -y
          cd pyinstaller
          pip install .
      
      - name: Install dependencies
        run: |
          choco install libreoffice tesseract ghostscript 7zip -y
          pip install -r ./services/converter-sw/requirements.txt

      - name: Download FFmpeg static build
        shell: bash
        run: |
          curl -L -o ffmpeg.zip https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip
          unzip ffmpeg.zip
          mkdir -p ffmpeg-bin
          cp ffmpeg-*/bin/ffmpeg.exe ffmpeg-bin/
                
      - name: Copy LibreOffice program directory (bash)
        shell: bash
        run: |
          mkdir -p libreoffice
          cp -r "/c/Program Files/LibreOffice/"/* libreoffice/

      - name: Copy Tesseract executable (bash)
        shell: bash
        run: |
          mkdir -p tesseract-bin
          cp -r "/c/Program Files/Tesseract-OCR"/* tesseract-bin/
      
      - name: Copy Ghostscript binary (bash)
        shell: bash
        run: |
          mkdir -p ghostscript
          cp -r "/c/Program Files/gs/gs"*/* ghostscript/
      - name: Copy 7-Zip binary (Windows)
        shell: bash
        run: |
          mkdir -p 7zip
          cp -r "/c/Program Files/7-Zip"/* 7zip/
      
      
      - name: Build app (Windows)
        run: |
          pyinstaller ^
            --noconfirm --clean --console ^
            --onefile --log-level DEBUG ^
            --add-data "services\\converter-sw\\build;build" ^
            --add-data "libreoffice;dependencies/libreoffice" ^
            --add-data "tesseract-bin;dependencies/tesseract-ocr" ^
            --add-data "ffmpeg-bin\\ffmpeg.exe;dependencies" ^
            --add-data "ghostscript;dependencies/ghostscript" ^
            --add-data "7zip;dependencies/7zip" ^
            --distpath output\\windows services\\converter-sw\\convertMaster.py
        shell: cmd
      
      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ./output/windows/*